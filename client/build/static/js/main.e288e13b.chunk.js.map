{"version":3,"sources":["logo.svg","components/List/List.js","components/List/ListItem.js","components/ChecklistCard/ChecklistCard.js","utils/StickyState.js","containers/ChecklistManagment/ChecklistManagement.js","containers/Homepage/Homepage.js","components/Nav/index.js","components/AgGrid/MasterDetail.js","components/Bootstrap/Table/Table.js","components/Checklist/Checklist.js","App.js","reportWebVitals.js","index.js"],"names":["List","props","className","children","ListItem","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","ChecklistCard","classes","useState","editingTitle","setEditingTitle","checklistTitle","setChecklistTitle","Card","CardContent","Typography","variant","component","TextField","id","label","value","onChange","e","currentTarget","Button","size","onClick","saveChecklist","color","style","float","deleteChecklist","CardActions","canContinue","continue","canFillOut","fillOut","update","useStickyState","defaultValue","key","React","stickyValue","window","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","newChecklist","_id","phases","ChecklistManagement","checklists","setChecklists","currentChecklists","setCurrentChecklists","getChecklists","a","axios","get","checklistsResponse","data","goToUpdateChecklist","location","fillOutChecklist","checklist","filter","ck","length","_","cloneDeep","template","continueCurrentChecklist","currentChecklist","createNewChecklist","post","checklistId","delete","Grid","container","item","map","find","phase","index","Homepage","Nav","href","now","DateTime","toFormat","initialState","modules","ClientSideRowModelModule","MasterDetailModule","MenuModule","ColumnsToolPanelModule","columnDefs","field","headerName","cellRenderer","hide","defaultColDef","flex","editable","popupParent","document","querySelector","detailCellRendererParams","detailGridOptions","headerClass","maxWidth","sortable","rowDrag","onGridReady","params","columnApi","applyColumnState","state","colId","sort","defaultState","sortModel","defaultGroupSortComparator","b","line","resizable","headerHeight","getRowNodeId","row","getContextMenuItems","onCellValueChanged","stopEditingWhenGridLosesFocus","animateRows","getDetailRowData","successCallback","tasks","rowData","order","finalReview","finalReviewDate","review","reviewDate","prepared","preparedDate","explanationRef","templateRef","mfiRef","instruction","GridExample","setData","gridApi","useRef","gridColumnApi","sortActive","forEach","task","phaseId","name","action","node","rows","api","forEachNode","push","console","log","phasesToAdd","createNewPhase","phasesToUpdate","concat","applyTransaction","add","newTask","createNewTask","tasksToAdd","tasksToUpdate","cssClasses","uuidv4","onRowDragMove","event","movingNode","overNode","rowNeedsToMove","movingData","overData","fromIndex","indexOf","toIndex","newStore","slice","arr","element","splice","moveInArray","setRowData","clearFocusedCell","onSortChanged","current","getSortModel","suppressRowDrag","setSuppressRowDrag","colDef","newVal","oldVal","oldValue","siblings","sibling","width","height","masterDetail","Table","columnHeadings","explanation","Checklist","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e288e13b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\n\nexport default function List(props) {\n    return (\n        <ul className=\"list-group\">\n            {props.children}\n        </ul>\n    )\n}","import React from 'react';\n\nexport default function ListItem(props) {\n    return (\n        <li className=\"list-group-item\">\n            {props.children}\n        </li>\n    );\n}","import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from \"@material-ui/core/TextField\";\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n});\n\nexport default function ChecklistCard(props) {\n    const classes = useStyles();\n    const bull = <span className={classes.bullet}>•</span>;\n    const [editingTitle, setEditingTitle] = useState(props.title ? false : true);\n    const [checklistTitle, setChecklistTitle] = useState(props.title);\n\n    return (\n        <Card className={classes.root}>\n            <CardContent>\n                <Typography variant=\"h5\" component=\"h2\">\n                    {\n                        editingTitle ?\n                            <>\n                                <TextField\n                                    id=\"outlined-basic\"\n                                    label=\"Checklist Title\"\n                                    variant=\"outlined\"\n                                    value={checklistTitle}\n                                    onChange={(e) => setChecklistTitle(e.currentTarget.value)}\n                                />\n                                <Button variant=\"contained\" size=\"small\" onClick={e => {\n                                    props.saveChecklist(checklistTitle);\n                                    setEditingTitle(false);\n                                }}>Save Title</Button>\n                            </> :\n                            <>\n                                {checklistTitle}\n                                <Button variant=\"contained\" size=\"small\" onClick={e => setEditingTitle(true)}>Edit Title</Button>\n                            </>\n                    }\n                    <Button variant=\"contained\" size=\"small\" color=\"secondary\" style={{float: 'right'}} onClick={e => props.deleteChecklist(props.id)}>Delete</Button>\n                </Typography>\n                <Typography variant=\"body2\" component=\"div\">\n                    {props.children}\n                </Typography>\n            </CardContent>\n            <CardActions>\n                {\n                    props.canContinue ?\n                        <Button variant=\"contained\" size=\"small\" onClick={e => props.continue(props.id)}>Continue Last</Button> :\n                        ''\n                }\n                {\n                    props.canFillOut ?\n                        <Button variant=\"contained\" size=\"small\" onClick={e => props.fillOut(props.id)}>Fill out</Button> :\n                        ''\n                }\n                <Button variant=\"contained\" size=\"small\" onClick={e => props.update(props.id)}>Update</Button>\n            </CardActions>\n        </Card>\n    );\n}","import React from 'react';\n\nfunction useStickyState(defaultValue, key) {\n    const [value, setValue] = React.useState(() => {\n        const stickyValue = window.localStorage.getItem(key);\n        return stickyValue !== null\n            ? JSON.parse(stickyValue)\n            : defaultValue;\n    });\n    React.useEffect(() => {\n        window.localStorage.setItem(key, JSON.stringify(value));\n    }, [key, value]);\n    return [value, setValue];\n}\n\nexport default useStickyState;","import React, {useEffect, useState} from 'react';\nimport axios from 'axios';\nimport List from '../../components/List/List';\nimport ListItem from '../../components/List/ListItem';\nimport ChecklistCard from \"../../components/ChecklistCard/ChecklistCard\";\nimport useStickyState from \"../../utils/StickyState\";\nimport _ from 'lodash';\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\n\nconst newChecklist = {_id: '', title: '', phases: []}\n\nexport default function ChecklistManagement() {\n    const [checklists, setChecklists] = useState([]);\n    const [currentChecklists, setCurrentChecklists] = useStickyState([], 'currentChecklist')\n\n    useEffect(() => {\n        getChecklists();\n    }, []);\n\n    const getChecklists = async () => {\n        const checklistsResponse = await axios.get('/api/checklists');\n\n        setChecklists(checklistsResponse.data);\n    }\n\n    const goToUpdateChecklist = async (id) => {\n        window.location = `/checklist/${id}`;\n    }\n\n    const fillOutChecklist = async (id) => {\n        //If the user is filling out the checklist, copy it and send them to the page\n        let checklist = checklists.filter(ck => ck.id === id);\n        if(checklist.length === 0)\n            return;\n        let newChecklist = _.cloneDeep(checklist[0]);\n        newChecklist.id = 'newChecklist';\n        newChecklist.template = id;\n\n        setCurrentChecklists([...currentChecklists, newChecklist]);\n    }\n\n    const continueCurrentChecklist = async (id) => {\n        let currentChecklist = currentChecklists.filter(ck => ck.template === id);\n        if(currentChecklist === 0)\n            return;\n\n        window.location = `/checklist/${currentChecklist[0].id}`;\n    }\n\n    const createNewChecklist = async() => {\n        setChecklists([{...newChecklist}, ...checklists]);\n    }\n\n    const saveChecklist = async(checklist) => {\n        const updatedChecklist = await axios.post('/api/checklists/', checklist);\n    };\n\n    const deleteChecklist = async(checklistId) => {\n        const deleteChecklist = await axios.delete('/api/checklists/' + checklistId);\n        getChecklists();\n    }\n\n    return (\n        <>\n            <Grid container>\n                <Grid item>\n                    <Button variant=\"contained\" size=\"small\" onClick={e => createNewChecklist()}>New Checklist</Button>\n                </Grid>\n            </Grid>\n            <List>\n                {\n                    checklists.map(checklist => {\n                        return (<ListItem key={checklist._id + 'li'}>\n                            <ChecklistCard\n                                title={checklist.title}\n                                fillOut={fillOutChecklist}\n                                update={goToUpdateChecklist}\n                                continue={continueCurrentChecklist}\n                                deleteChecklist={deleteChecklist}\n                                canContinue={currentChecklists.find(ck => ck.template === checklist.id || ck.template === checklist._id)}\n                                canFillOut={checklist.phases.length > 0}\n                                id={checklist._id}\n                                key={checklist._id}\n                                saveChecklist={(title) => saveChecklist({...checklist, title})}\n                            >\n                                <List>\n                                    {\n                                        checklist.phases.map((phase, index) => {\n                                            if(index > 2)\n                                                return;\n                                            return (<ListItem key={`phase${index}`}>{phase.title}</ListItem>)\n                                        })\n                                    }\n                                </List>\n                            </ChecklistCard>\n                        </ListItem>)\n                    })\n                }\n            </List>\n        </>\n    )\n}\n\n","import React from 'react';\nimport './Homepage.css';\nimport ChecklistManagement from \"../ChecklistManagment/ChecklistManagement\";\n\n/**\n * Talk about what this app allows you to do\n */\nconst Homepage = (props) => {\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<ChecklistManagement/>\n\t\t</div>\n\t)\n}\n\nexport default Homepage;","import React from \"react\";\r\n\r\nfunction Nav() {\r\n  return (\r\n    <nav className=\"navbar navbar-expand beta-menu navbar-dropdown align-items-center navbar-fixed-top navbar-toggleable-sm bg-dark text-white\">\r\n      <div className='icon-wrap align-right'></div>\r\n      <a className=\"navbar-brand text-white\" href=\"/\">\r\n        Home\r\n      </a>\r\n      <a className=\"navbar-brand text-white\" href=\"/Login\">\r\n        Login\r\n      </a>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","'use strict';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { AgGridReact } from '@ag-grid-community/react';\nimport { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\nimport { MasterDetailModule } from '@ag-grid-enterprise/master-detail';\nimport { MenuModule } from '@ag-grid-enterprise/menu';\nimport { ColumnsToolPanelModule } from '@ag-grid-enterprise/column-tool-panel';\nimport '@ag-grid-community/core/dist/styles/ag-grid.css';\nimport '@ag-grid-community/core/dist/styles/ag-theme-alpine.css';\nimport './AgGrid.scss';\nimport DateTime from \"luxon/src/datetime\";\nimport { v4 as uuidv4 } from 'uuid';\n\nconst now = DateTime.now().toFormat('MM/dd');\n\nconst initialState = {\n    modules: [\n        ClientSideRowModelModule,\n        MasterDetailModule,\n        MenuModule,\n        ColumnsToolPanelModule,\n    ],\n    columnDefs: [\n        { field: 'title', headerName: 'Phases', cellRenderer: 'agGroupCellRenderer' },\n        { field: 'order', headerName: 'Line', hide: true },\n    ],\n    defaultColDef: {\n        flex: 1,\n        editable: true,\n    },\n    popupParent: document.querySelector('body'),\n    detailCellRendererParams: {\n        detailGridOptions: {\n            columnDefs: [\n                {\n                    field: 'finalReview',\n                    headerName: 'Final Review',\n                    headerClass: 'rotated-header',\n                    maxWidth: 100,\n                    // cellClass: 'initial-cell',\n                    // minWidth: 100,\n                    // maxHeight: 100,\n                },\n                {\n                    field: 'finalReviewDate',\n                    headerName: 'Final Reviewed Date',\n                    headerClass: 'rotated-header',\n                    maxWidth: 100,\n                    // headerClass: 'rotated-text'\n                },\n                {\n                    field: 'review',\n                    headerName: 'Review',\n                    headerClass: 'rotated-header',\n                    maxWidth: 100,\n                    // cellClass: 'initial-cell',\n                    // minWidth: 100\n                    // maxWidth: 50,\n                },\n                {\n                    field: 'reviewDate',\n                    headerName: 'Reviewed Date',\n                    headerClass: 'rotated-header',\n                    maxWidth: 100,\n                },\n                {\n                    field: 'prepared',\n                    headerName: 'Prepare',\n                    headerClass: 'rotated-header',\n                    maxWidth: 100,\n                    // cellClass: 'initial-cell',\n                    // minWidth: 100,\n                    // maxWidth: 50,\n                },\n                {\n                    field: 'preparedDate',\n                    headerName: 'Prepared Date',\n                    headerClass: 'rotated-header',\n                    maxWidth: 100,\n                    // cellEditor: 'datePicker',\n                    // cellClass: 'initial-cell',\n                    // minWidth: 100,\n                },\n                {\n                    field: 'explanationRef',\n                    headerName: 'Explanation Ref',\n                    headerClass: 'rotated-header',\n                    maxWidth: 200,\n                },\n                {\n                    field: 'templateRef',\n                    headerName: 'Template Ref',\n                    headerClass: 'rotated-header',\n                    maxWidth: 200,\n                },\n                {\n                    field: 'mfiRef',\n                    headerName: 'MFI #',\n                    maxWidth: 200,\n                    // headerClass: 'rotated-header',\n                },\n                {\n                    field: 'line',\n                    headerName: 'Line #',\n                    maxWidth: 100,\n                    sortable: true,\n                    rowDrag: true,\n                    // headerClass: 'rotated-header',\n                },\n                {\n                    field: 'instruction',\n                    headerName: 'Instructions / Detail',\n                    minWidth: 300,\n                },\n            ],\n            onGridReady: params => {\n                //Sort by order\n                params.columnApi.applyColumnState({\n                    state: [\n                        {\n                            colId: 'line',\n                            sort: 'asc',\n                        },\n                    ],\n                    defaultState: {sort: null},\n                });\n            },\n            sortModel: [{field: 'line', sort: 'asc'}],\n            defaultGroupSortComparator: (a,b) => a.line - b.line,\n            defaultColDef: {\n                flex: 1,\n                editable: true,\n                resizable: true,\n            },\n            headerHeight: 150,\n            getRowNodeId: row => {\n                return row._id;\n            },\n            getContextMenuItems: (params) => { },\n            onCellValueChanged: (params) => { },\n            stopEditingWhenGridLosesFocus: true,\n            // rowDragManaged:true,\n            animateRows: true,\n            // components: { datePicker: getDatePicker() },\n        },\n        getDetailRowData: function (params) {\n            params.successCallback(params.data.tasks);\n        },\n    },\n    rowData: [\n        {\n            _id: 0,\n            title: 'Phase 1',\n            order: 1,\n            tasks: [\n                {\n                    _id: 1,\n                    finalReview: 'WH',\n                    finalReviewDate: now,\n                    review: 'JY',\n                    reviewDate: now,\n                    prepared: 'WH',\n                    preparedDate: now,\n                    explanationRef: '01.01',\n                    templateRef: '02.01',\n                    mfiRef: '01',\n                    line: 1,\n                    instruction: 'Clean out the dog house',\n                },\n                {\n                    _id: 2,\n                    finalReview: '',\n                    finalReviewDate: '',\n                    review: 'JY',\n                    reviewDate: now,\n                    prepared: 'WH',\n                    preparedDate: now,\n                    explanationRef: '01.01',\n                    templateRef: '02.01',\n                    mfiRef: '02',\n                    line: 2,\n                    instruction: 'Clean out the dog house'\n                },\n                {\n                    _id: 3,\n                    finalReview: '',\n                    finalReviewDate: '',\n                    review: 'JY',\n                    reviewDate: now,\n                    prepared: 'WH',\n                    preparedDate: now,\n                    explanationRef: '01.01',\n                    templateRef: '02.01',\n                    mfiRef: '03',\n                    line: 3,\n                    instruction: 'Clean out the dog house'\n                },\n            ]\n        },\n    ],\n};\n\nconst GridExample = props => {\n    const [data, setData] = useState([]);\n    const gridApi = useRef({});\n    const gridColumnApi = useRef({});\n    const sortActive = useRef(true);\n\n    useEffect( () => {\n        //Get the row data\n        let rowData = initialState.rowData;\n\n        //Add the phase id to each task, this will help me know which phase to modify when a\n        //task is modified or a new task is added.\n        rowData.forEach(phase => {\n           phase.tasks.forEach(task => task.phaseId = phase._id)\n        });\n\n        //Update the state\n        setData(rowData);\n    }, []);\n\n    const onGridReady = (params) => {\n        gridApi.current = params.api;\n        params.columnApi.applyColumnState({\n            state: [\n                {\n                    colId: 'order',\n                    sort: 'asc',\n                },\n            ],\n            defaultState: {sort: null},\n        });\n        gridColumnApi.current = params.columnApi;\n    };\n\n    const getContextMenuItems = (params) => {\n        const result = [\n            {\n                name: 'Insert',\n                action: function () {\n                    //I'm going to program this assuming that there is a phase_id in each task.\n                    let row = params.node.data;\n                    let rows = [];\n                    params.api.forEachNode( (node) => rows.push(node.data));\n\n                    console.log(\"phases\", rows);\n\n                    //Find where the row should be inserted, first checking whether we are inserting a phase or task\n                    //If there are tasks that means we are inserting a new phase\n                    if(row.tasks)\n                    {\n                        let phasesToAdd = [createNewPhase(row.order + 1)];\n                        let phasesToUpdate = rows.filter(phase => phase.order > row.order);\n                        phasesToUpdate.forEach(phase => phase.order++);\n\n                        setData(rows.concat(phasesToAdd));\n\n                        params.api.applyTransaction({\n                            add: phasesToAdd,\n                            update: phasesToUpdate\n                        });\n\n                        //Sort by order\n                        params.columnApi.applyColumnState({\n                            state: [\n                                {\n                                    colId: 'order',\n                                    sort: 'asc',\n                                },\n                            ],\n                            defaultState: {sort: null},\n                        });\n                    }\n                    //Otherwise we are inserting a new task\n                    else\n                    {\n                        //Get the phase that the selected task is apart of\n                        let phase = data.find(phase => phase._id === row.phaseId);\n\n                        //Create the new task\n                        let newTask = createNewTask(row.phaseId, row.line + 1);\n\n                        newTask.phaseId = phase._id;\n                        let tasksToAdd = [newTask];\n\n                            //Get the tasks where their line #s need updated.\n                        let tasksToUpdate = phase.tasks.filter(task => task.line > row.line);\n                        tasksToUpdate.forEach(task => task.line++);\n\n                        phase.tasks = phase.tasks.concat(tasksToAdd);\n\n                        //Update the grid\n                        params.api.applyTransaction({\n                            add: tasksToAdd,\n                            update: tasksToUpdate,\n                        });\n\n                        //Sort by line #\n                        params.columnApi.applyColumnState({\n                            state: [\n                                {\n                                    colId: 'line',\n                                    sort: 'asc',\n                                },\n                            ],\n                            defaultState: {sort: null},\n                        });\n                    }\n\n                },\n                cssClasses: ['redFont', 'bold'],\n            },\n        ];\n        return result;\n    };\n\n    const createNewPhase = (order) => {\n        let id = uuidv4();\n        return {\n            title: '<Hit enter to enter the title of this phase>',\n            tasks: [createNewTask(id, 1)],\n            order,\n            _id: id,\n        }\n    };\n\n    const getRowNodeId = (row) => {\n        return row._id;\n    };\n\n    const createNewTask = (phaseId, line, title) => {\n        let dt = DateTime.now().toFormat('MM/dd');\n        return {\n            finalReview: '',\n            finalReviewDate: '',\n            review: '',\n            reviewDate: '',\n            prepared: '',\n            preparedDate: '',\n            explanationRef: '',\n            templateRef: '',\n            mfiRef: '',\n            line: line,\n            phaseId: phaseId,\n            _id: uuidv4(),\n            instruction: title || '<Double click or hit enter to enter task instruction / details>',\n        }\n    };\n\n    initialState.detailCellRendererParams.detailGridOptions.getContextMenuItems = getContextMenuItems;\n    initialState.detailCellRendererParams.detailGridOptions.onRowDragMove = (event) => {\n        let rowData = [];\n        event.api.forEachNode(node => rowData.push(node));\n        const movingNode = event.node;\n        const overNode = event.overNode;\n        const rowNeedsToMove = movingNode !== overNode;\n        console.log('event on row drag move', event);\n        if (rowNeedsToMove) {\n            const movingData = movingNode.data;\n            const overData = overNode.data;\n            const fromIndex = rowData.indexOf(movingData);\n            const toIndex = rowData.indexOf(overData);\n            const newStore = rowData.slice();\n            moveInArray(newStore, fromIndex, toIndex);\n            setData(newStore);\n            event.api.setRowData(newStore);\n            event.api.clearFocusedCell();\n        }\n        function moveInArray(arr, fromIndex, toIndex) {\n            const element = arr[fromIndex];\n            arr.splice(fromIndex, 1);\n            arr.splice(toIndex, 0, element);\n        }\n    };\n    initialState.detailCellRendererParams.detailGridOptions.onSortChanged = () => {\n        const sortModel = gridApi.current.getSortModel();\n        sortActive.current = sortModel && sortModel.length > 0;\n        const suppressRowDrag = sortActive;\n        console.log(\n            'sortActive = ' +\n            sortActive +\n            ', allowRowDrag = ' +\n            suppressRowDrag\n        );\n        gridApi.current.setSuppressRowDrag(suppressRowDrag);\n    };\n\n    initialState.detailCellRendererParams.detailGridOptions.onCellValueChanged = (params) => {\n        console.log(\"cell value changed\", params);\n        //If the line # changes we want to move the other line #'s around\n        if(params.colDef.field === 'line')\n        {\n            let newVal = params.value;\n            let oldVal = params.oldValue;\n            let siblings = [];\n            params.api.forEachNode( (node) => siblings.push(node.data));\n\n            //If the newVal > oldVal get the nodes with line # > oldVal and <= newVal, decrement line #'s\n            if(newVal > oldVal) {\n                if(newVal > siblings.length)\n                    newVal = siblings.length;\n\n                siblings.forEach(sibling => {\n                    if (sibling.line > oldVal && sibling.line <= newVal)\n                        sibling.line--;\n                });\n            }\n            else if(oldVal > newVal) {\n                if(newVal < 1)\n                    newVal = 1;\n                siblings.forEach(sibling => {\n                    if (sibling.line < oldVal && sibling.line >= newVal)\n                        sibling.line++;\n                });\n            }\n\n            //Update the row\n            let row = params.node.data;\n            row.line = newVal;\n            siblings.push(row);\n\n            params.api.applyTransaction({\n                update: siblings\n            });\n\n            //Sort by order\n            params.columnApi.applyColumnState({\n                state: [\n                    {\n                        colId: 'line',\n                        sort: 'asc',\n                    },\n                ],\n                defaultState: {sort: null},\n            });\n        }\n    };\n\n    return (\n        <div style={{ width: '100%', height: 'calc(100% - 50px)' }}>\n            <div\n                id=\"myGrid\"\n                style={{\n                    height: '100%',\n                    width: '100%',\n                }}\n                className=\"ag-theme-alpine\"\n            >\n                <AgGridReact\n                    modules={initialState.modules}\n                    columnDefs={initialState.columnDefs}\n                    defaultColDef={initialState.defaultColDef}\n                    masterDetail={true}\n                    stopEditingWhenGridLosesFocus={true}\n                    // rowDragManaged={true}\n                    // defaultSortColumn={'order'}\n                    sortModel={[{field: 'order', sort: 'asc'}]}\n                    getRowNodeId={getRowNodeId}\n                    popupParent={initialState.popupParent}\n                    detailCellRendererParams={initialState.detailCellRendererParams}\n                    getContextMenuItems={getContextMenuItems}\n                    onGridReady={onGridReady}\n                    // onFirstDataRendered={onFirstDataRendered.bind(this)}\n                    rowData={data}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default GridExample\n\n// function getDatePicker() {\n//     function Datepicker() {}\n//     Datepicker.prototype.init = function (params) {\n//         this.eInput = document.createElement('input');\n//         this.eInput.value = params.value;\n//         this.eInput.classList.add('ag-input');\n//         this.eInput.style.height = '100%';\n//         $(this.eInput).datepicker({ dateFormat: 'dd/mm/yy' });\n//     };\n//     Datepicker.prototype.getGui = function () {\n//         return this.eInput;\n//     };\n//     Datepicker.prototype.afterGuiAttached = function () {\n//         this.eInput.focus();\n//         this.eInput.select();\n//     };\n//     Datepicker.prototype.getValue = function () {\n//         return this.eInput.value;\n//     };\n//     Datepicker.prototype.destroy = function () {};\n//     Datepicker.prototype.isPopup = function () {\n//         return false;\n//     };\n//     return Datepicker;\n// }","import React, {useState, useEffect, useRef} from 'react';\nimport Checkbox from '../Checkbox/Checkbox';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport 'ag-grid-enterprise';\nimport GridExample from \"../../AgGrid/MasterDetail\";\n\n\n/**\n * A Bootstrap styled table\n * @param {columnHeadings, data}\n * @constructor\n */\nconst Table = ( {columnHeadings = [], phases = []} ) => {\n\t//state variables\n\n    //useEffects(Lifecycle Methods)\n    /**\n     * ComponentDidMount: What should happen when this component is first loaded into the DOM\n     */\n    useEffect( () => {\n\t\tconsole.log('headings', columnHeadings);\n\t\tconsole.log(\"phases\", phases);\n    }, []);\n\n\t//Other Methods\n\tconst updateChecked = (e) => {\n\t\tconsole.log('event', e);\n\t\tconsole.log('current target', e.currentTarget);\n\t};\n\n    return (\n\t\t<GridExample>\n\n\t\t</GridExample>\n\t\t// <table className='table table-striped table-dark table-hover table-bordered'>\n\t\t// \t<thead>\n\t\t// \t\t<tr>\n\t\t// \t\t\t{columnHeadings.map( head => <td scope=\"col\" style={head.style ? head.style : {}}>{head.label}</td>)}\n\t\t// \t\t</tr>\n\t\t// \t</thead>\n\t\t// \t<tbody>\n\t\t// \t\t{\n\t\t// \t\t\tphases.map(phase => (\n\t\t// \t\t\t\t<>\n\t\t// \t\t\t\t\t<tr>\n\t\t// \t\t\t\t\t\t<td colSpan={columnHeadings.length}><p className='h4'>{phase.title}</p></td>\n\t\t// \t\t\t\t\t</tr>\n\t\t// \t\t\t\t\t{\n\t\t// \t\t\t\t\t\tphase.tasks.map(row => \n\t\t// \t\t\t\t\t\t\t(\n\t\t// \t\t\t\t\t\t\t\t<tr scope={'row'}>\n\t\t// \t\t\t\t\t\t\t\t\t{columnHeadings.map( head => {\n\t\t// \t\t\t\t\t\t\t\t\t\tlet td = '';\n\t\t// \t\t\t\t\t\t\t\t\t\tif(typeof row[head.value] === 'boolean')\n\t\t// \t\t\t\t\t\t\t\t\t\t\ttd = <Checkbox name={head.value} checked={row[head.value]} updateChecked={updateChecked}></Checkbox>\n\t\t// \t\t\t\t\t\t\t\t\t\telse\n\t\t// \t\t\t\t\t\t\t\t\t\t\ttd = row[head.value]\n\t\t\t\t\n\t\t// \t\t\t\t\t\t\t\t\t\treturn <td scope='col'>{td}</td>\n\t\t// \t\t\t\t\t\t\t\t\t})}\n\t\t// \t\t\t\t\t\t\t\t</tr>\n\t\t// \t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\n\t\t// \t\t\t\t\t\t)\n\t\t// \t\t\t\t\t}\n\t\t// \t\t\t\t</>\n\t\t// \t\t\t))\n\t\t// \t\t}\n\t\t// \t</tbody>\n\t\t// </table>\n    );\n};\n\nexport default Table;","import React, {useState, useEffect, useRef} from 'react';\nimport Table from '../Bootstrap/Table/Table';\nimport { DateTime } from \"luxon\";\nimport './Checklist.scss'\n\n//Checklist schema\nconst columnHeadings = [\n\t{ label: 'Final Reviewed By', value: 'finalReview', style: {transform: 'rotate(90deg)'} },\n\t{ label: 'Final Reviewed Date', value: 'finalReviewDate', style: {transform: 'rotate(90deg)'}  },\n\t{ label: 'Reviewed By', value: 'review', style: {transform: 'rotate(90deg)'}  },\n\t{ label: 'Reviewed Date', value: 'reviewDate', style: {transform: 'rotate(90deg)'}  },\n\t{ label: 'Prepared By', value: 'prepare', style: {transform: 'rotate(90deg)'}  },\n\t{ label: 'Prepared Date', value: 'prepareDate', style: {transform: 'rotate(90deg)'}  },\n\t{ label: 'Explanation Ref', value: 'explanation', style: {transform: 'rotate(90deg)'}  },\n\t{ label: 'Template Ref', value: 'template', style: {transform: 'rotate(90deg)'}  },\n\t{ label: 'Line #', value: 'line' },\n\t{ label: 'Instruction / Detail', value: 'instruction', style: {minWidth: '600px'} },\n]\n\nconst now = DateTime.now().toFormat('MM/dd');\n\nconst checklist = {\n\tphases: [\n\t   {\n\t\t   title: 'Phase 1',\n\t\t   tasks: [\n\t\t\t   {\n\t\t\t\t   finalReview: '',\n\t\t\t\t   finalReviewDate: '',\n\t\t\t\t   review: 'JY',\n\t\t\t\t   reviewDate: now,\n\t\t\t\t   prepared: 'WH',\n\t\t\t\t   preparedDate: now,\n\t\t\t\t   explanation: '01.01',\n\t\t\t\t   template: '02.01',\n\t\t\t\t   line: 1,\n\t\t\t\t   instruction: 'Clean out the dog house'\n\t\t\t   },\n\t\t\t   {\n\t\t\t\t   finalReview: '',\n\t\t\t\t   finalReviewDate: '',\n\t\t\t\t   review: 'JY',\n\t\t\t\t   reviewDate: now,\n\t\t\t\t   prepared: 'WH',\n\t\t\t\t   preparedDate: now,\n\t\t\t\t   explanation: '01.02',\n\t\t\t\t   template: '02.02',\n\t\t\t\t   line: 2,\n\t\t\t\t   instruction: 'Setup sleeping area(pillow blankets, etc.'\n\t\t\t   },\n\t\t\t   {\n\t\t\t\t   finalReview: '',\n\t\t\t\t   finalReviewDate: '',\n\t\t\t\t   review: 'JY',\n\t\t\t\t   reviewDate: now,\n\t\t\t\t   prepared: 'WH',\n\t\t\t\t   preparedDate: now,\n\t\t\t\t   explanation: '01.02',\n\t\t\t\t   template: '02.02',\n\t\t\t\t   line: 2,\n\t\t\t\t   instruction: 'Sneak the bucket of ice cream out and hide it under your pillow'\n\t\t\t   }\n\t\t   ]\n\t   },\n\t   {\n\t\t   title: 'Phase 2',\n\t\t   tasks: [\n\t\t\t   {\n\t\t\t\t   finalReview: '',\n\t\t\t\t   finalReviewDate: '',\n\t\t\t\t   review: 'JY',\n\t\t\t\t   reviewDate: now,\n\t\t\t\t   prepared: 'WH',\n\t\t\t\t   preparedDate: now,\n\t\t\t\t   explanation: '01.01',\n\t\t\t\t   template: '02.01',\n\t\t\t\t   line: 3,\n\t\t\t\t   instruction: 'Setup rain cover in case it rains'\n\t\t\t   },\n\t\t\t   {\n\t\t\t\t   finalReview: '',\n\t\t\t\t   finalReviewDate: '',\n\t\t\t\t   review: 'JY',\n\t\t\t\t   reviewDate: now,\n\t\t\t\t   prepared: 'WH',\n\t\t\t\t   preparedDate: now,\n\t\t\t\t   explanation: '01.02',\n\t\t\t\t   template: '02.02',\n\t\t\t\t   line: 4,\n\t\t\t\t   instruction: 'Prepare dinner (there\\'s dog food somewhere)'\n\t\t\t   }\n\t\t   ]\n\t   },\n\t   {\n\t\t   title: 'Phase 3',\n\t\t   tasks: [\n\t\t\t   {\n\t\t\t\t   finalReview: '',\n\t\t\t\t   finalReviewDate: '',\n\t\t\t\t   review: 'JY',\n\t\t\t\t   reviewDate: now,\n\t\t\t\t   prepared: 'WH',\n\t\t\t\t   preparedDate: now,\n\t\t\t\t   explanation: '01.01',\n\t\t\t\t   template: '02.01',\n\t\t\t\t   line: 5,\n\t\t\t\t   instruction: 'Go to sleep'\n\t\t\t   },\n\t\t\t   {\n\t\t\t\t   finalReview: '',\n\t\t\t\t   finalReviewDate: '',\n\t\t\t\t   review: 'JY',\n\t\t\t\t   reviewDate: now,\n\t\t\t\t   prepared: 'WH',\n\t\t\t\t   preparedDate: now,\n\t\t\t\t   explanation: '01.02',\n\t\t\t\t   template: '02.02',\n\t\t\t\t   line: 6,\n\t\t\t\t   instruction: 'Wake up'\n\t\t\t   },\n\t\t\t   {\n\t\t\t\t   finalReview: '',\n\t\t\t\t   finalReviewDate: '',\n\t\t\t\t   review: 'JY',\n\t\t\t\t   reviewDate: now,\n\t\t\t\t   prepared: 'WH',\n\t\t\t\t   preparedDate: now,\n\t\t\t\t   explanation: '01.02',\n\t\t\t\t   template: '02.02',\n\t\t\t\t   line: 6,\n\t\t\t\t   instruction: 'Bully Nate because you woke up on the wrong side of the lawn and it\\'s his fault'\n\t\t\t   }\n\t\t   ]\n\t   },\n\t]\n}\n\n/**\n * Loads in the checklist corresponding to the id passed\n * @param {checklistId, ...props}\n * @constructor\n */\nconst Checklist = ( {checklistId, ...props} ) => {\n    //state variables\n\n    //useEffects(Lifecycle Methods)\n    /**\n     * ComponentDidMount: What should happen when this component is first loaded into the DOM\n     */\n    useEffect( () => {\n\n    }, []);\n\n    //Other Methods\n\n    return (\n\t\t<div style={ {height: '100%'} }>\n\t\t\t<h2>Checklist</h2>\n\t\t\t<Table columnHeadings={columnHeadings} phases={checklist.phases}></Table>\n\t\t</div>\n        \n    );\n};\n\nexport default Checklist;","import logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Homepage from './containers/Homepage/Homepage';\nimport Nav from './components/Nav';\nimport Checklist from './components/Checklist/Checklist';\n\nfunction App() {\n  return (\n    <Router>\n      <div id=\"app\">\n        <Nav />\n        <div className={'container-fluid'}>\n          <Switch>\n            {/* What should the homepage be? */}\n            <Route exact path=\"/\">\n              <Homepage />\n            </Route>\n            <Route exact path=\"/checklist/:id\">\n              <Checklist />\n            </Route>\n            <Route>\n              {/* <NoMatch /> */}\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}